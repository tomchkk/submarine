#!/usr/bin/env bash

source "$FEATURE/require-feature"

##
# Cats the command's usage documentation.
##
__require_command::usage() {
    cat << EOF

$APP_NAME ($APP_VERSION) - Require

Add required submodules to a project.

Usage:  $APP_NAME require [<options>...] <repo> [<name>]

Options:
    -b, --branch    The required branch (default: master)
    -d, --dev       Add a requirement as development only
    -f, --force     Allows adding an otherwise ignored submodule path
    -v, --version   Optionally include a submodule version constraint (TODO).
    -h, --help      Print usage information

EOF
}

##
# Handles incoming command requests.
##
__require_command::handle() {
    local args=()
    local branch="master"
    local dev=false
    local force=false
    local positionals=()
    local version=false

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -b|--branch)
                branch="$2" && shift ;;
            -d|--dev)
                dev=true ;;
            -f|--force)
                force=true ;;
            -v|--version)
                version="$2" && shift ;;
            -h|-*|--help|--*)
                __require_command::usage && return 0 ;;
            *)
                positionals+=("$1") ;;
        esac

        shift
    done

    if [[ ${#positionals[@]} -eq 0 ]]; then
        __require_command::usage && return 0
    fi

    local name="${positionals[1]:-$(
        require_feature::parse_name_from_repo "${positionals[0]}"
    )}"
    positionals[1]="$SUBMODULES_DIR/$name"

    local options=("$dev" "$version")
    local arguments=(
        --branch "$branch"
        $($force && echo "--force")
        --name "$name"
        --
        "${positionals[@]}"
    )

    require_feature::require "${options[@]}" "${arguments[@]}"
}

# handle empty args
[[ -z "$@" ]] && set -- "--help"

__require_command::handle $@
