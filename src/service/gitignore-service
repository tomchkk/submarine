#!/usr/bin/env bash

##
# Gets the git repo ignore file.
##
__gitignore_service::get_file() {
    local default="$(git -C "$GIT_PATH" config --local core.excludesFile)"

    echo "${GIT_PATH}/${default:-"./.gitignore"}"
}

__gitignore_service_file="$(__gitignore_service::get_file)"

##
# Adds a given target item to the project .gitignore file, if it doesn't already
# exist, creating the .gitignore file in the process if it doesn't exist.
##
gitignore_service::add() {
    local target="${1:?"A target is required"}"

    if [[ ! -f "$__gitignore_service_file" ]]; then
        touch "$__gitignore_service_file"
    fi

    __gitignore_service::block_insert "$target" "$__gitignore_service_file"
}

##
# Removes a given target item from the project .gitignore file.
##
gitignore_service::remove() {
    local target="${1:?"A target is required"}"

    if $(grep -q "^${target}$" "$__gitignore_service_file"); then
        local content="$(grep -v "^${target}$" "$__gitignore_service_file")"

        if [[ -z "$content" ]]; then
            # empties the file, as there is no more content
            > "$__gitignore_service_file"
        else
            # replaces the whole file minus the target
            echo "$content" > "$__gitignore_service_file"
        fi
    fi
}

##
# Inserts an entry into a given file between opening and closing blocks,
# creating the blocks if necessary.
##
__gitignore_service::block_insert() {
    local entry="${1:?"An entry to insert is required"}"
    local file="${2:?"A file to edit is required"}"

    if $(grep --quiet "$entry" "$file"); then
        # the entry already exists
        return
    fi

    local block_start="###> tomchkk\/submarine ###"
    local block_end="###< tomchkk\/submarine ###"

    if $(grep --quiet "$block_start" "$file") \
    && $(grep --quiet "$block_end" "$file"); then
        # The blocks already exist so we're just(!) going to insert the entry
        # on the line before the closing block. I write _just_, this was
        # bloomin' hard to work out!
        sed -i '' "/$block_end/ i\\
$entry
        " "$file"
    else
        # the blocks don't exist yet, so we'll insert them along with the new
        # entry
        echo -e "\n${block_start/\\}\n${entry}\n${block_end/\\}" >> "$file"
    fi
}
