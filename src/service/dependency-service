#!/usr/bin/env bash

source "$SERVICE/submodule-service"

__dependency_service_submodules_dir="$SUBMODULES_DIR"

##
# Iterates dependencies for a given submodule path.
##
dependency_service::iterate_dependencies_for_path() {
    local super_path="$1"
    local states=($(git submodule status --recursive $super_path))
    local dependencies=()

    # $states is a string, so we have to break it down into parts to then
    # reassemble it again as a useable array
    for item in "${states[@]}"; do
        local dependency_sha dependency_path

        case "$item" in
            **/**) dependency_path=$item ;;
            (*\)) : ;; # version noop
            *)
                if [[ -n $dependency_sha ]]
                && [[ "$dependency_path" != "$super_path" ]]; then
                    # exclude the parent path from the array

                    # at this point we've looped through all values and we're
                    # about to start again, so we'll push current values on to
                    # the dependencies stack and then unset the temp variables
                    dependencies+=("$dependency_sha $dependency_path")
                    unset dependency_sha dependency_path
                fi

                case "$item" in
                    [-+U]*) dependency_sha=$item ;;
                    # an installed sha with no local changes has a leading space
                    # we'll replace that something more consistent
                    *) dependency_sha="~"$item ;;
                esac
            ;;
        esac
    done

    if [[ "$dependency_path" != "$super_path" ]]; then
        # add the final dependency, but exclude the parent path from the array
        dependencies+=("$dependency_sha $dependency_path")
    fi

    for dependency in "${dependencies[@]}"; do
        __dependency_service::print_dependency $dependency
    done
}


##
# Prints the status of a given submodule dependency.
##
__dependency_service::print_dependency() {
    local state=${1:0:1}
    local sha=${1:1}
    local path=${@:2}

    echo "state: $state; sha: $sha; path: $path"
}
