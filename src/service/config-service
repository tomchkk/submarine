#!/usr/bin/env bash

__config_service_super_key="super"
__config_service_dev_key="dev"
__config_service_super_module_indicator="self"
__config_service_dependency_key="dependency"

##
# Adds a config key value to git submodule config, if it doesn't already exist.
##
__config_service::add_key() {
    local section="${1:?"A config section is required"}"
    local key="${2?:"A config key is required"}"
    local value="${3:?"A config value is required"}"

    local full_key="submodule.$section.$key"
    local existing=$(git config --file .gitmodules --get-all "$full_key")

    if [[ "$existing" != *"$value"* ]]; then
        # only add a new value
        git config --file .gitmodules --add "$full_key" "$value"
    fi
}

##
# Removes a config key with a given value.
##
__config_service::remove_key_with_value() {
    local section="${1:?"A config section is required"}"
    local key="${2?:"A config key is required"}"
    local value="${3:?"A config value is required"}"

    local full_key="submodule.$section.$key"

    git config --file .gitmodules --unset "$full_key" "^$value$"
}

##
# Removes all config items with a given key.
##
__config_service::remove_key() {
    local section="${1:?"A config section is required"}"
    local key="${2?:"A config key is required"}"

    local full_key="submodule.$section.$key"

    git config --file .gitmodules --unset-all "$full_key"
}

##
# Adds a config key to a submodule to indicate a submodule is a 'super' module
# - i.e.: a top-level required module.
##
config_service::set_as_super() {
    local name="${1:?"A super module name is required"}"

    local args=("$name" "$__config_service_super_module_indicator")
    config_service::set_dependency_super ${args[@]}
}

##
# Adds a config key to a submodule to indicate that a submodule is a 'dev'
# requirement - i.e. is only a requirement of the immediate project, it will not
# be required by projects installing it's parent.
##
config_service::set_as_dev() {
    local name="${1:?"A super module name is required"}"

    local args=("$name" "$__config_service_dev_key" true)
    __config_service::add_key ${args[@]}
}

##
# Sets a version constraint on a required submodule.
##
config_service::set_version() {
    local name="${1:?"A submodule name is required"}"
    local version="${2:?"A version constraint is required"}"

    # replace any existing version key with the given one
    __config_service::remove_key "$name" "version"
    __config_service::add_key "$name" "version" "$version"
}

##
# Adds a config key to a submodule to indicate a super module's dependencies.
##
config_service::set_super_dependency() {
    local super="${1:?"A super module name is required"}"
    local dependency="${2:?"A dependency module name is required"}"

    local args=("$super" "$__config_service_dependency_key" "$dependency")
    __config_service::add_key ${args[@]}
}

##
# Adds a config key to a submodule to indicate a dependency's super module.
##
config_service::set_dependency_super() {
    local dependency="${1:?"A dependency module name is required"}"
    local super="${2:?"A super module name is required"}"

    local args=("$dependency" "$__config_service_super_key" "$super")
    __config_service::add_key ${args[@]}
}

##
# Removes the config key for a submodule that indicates it's super module.
##
config_service::remove_dependency_super() {
    local dependency="${1:?"A dependency module name is required"}"
    local super="${2:-"$__config_service_super_module_indicator"}"

    local args=("$dependency" "$__config_service_super_key" "$super")
    __config_service::remove_key_with_value ${args[@]}
}

##
# Gets a count of super modules for a given submodule path.
##
config_service::path_super_count() {
    local path=${1:?"A path is required"}

    local args=("$__config_service_super_key" "$path")
    local supers=($(__config_service::get_all_config_item_for_path ${args[@]}))

    echo ${#supers[@]}
}

##
# Determines if the given path is a dependency of a given super module path.
##
config_service::path_is_dependency_of_super() {
    local path="${1:?"A path is required"}"
    local super_path="${2:-"$__config_service_super_module_indicator"}"

    local args=("$__config_service_super_key" "$path")
    local supers=$(__config_service::get_all_config_item_for_path ${args[@]})

    local super
    for super in ${supers[@]}; do
        if [[ "$super" == "$super_path" ]]; then
            return 0
        fi
    done

    return 1
}

##
# Gets all configured submodule names.
##
config_service::get_configured_names() {
    local names=()
    local options=(--file .gitmodules --name-only --get-regexp .path)

    for name in $(git config ${options[@]}); do
        names+=($(echo $name | cut -d '.' -f 2))
    done

    echo ${names[@]}
}

##
# Gets all configured submodule paths.
##
config_service::get_configured_paths() {
    local paths=()

    for key in $(__config_service::get_keys_for_item "path"); do
        paths+=($(git config --file .gitmodules --get "$key"))
    done

    echo ${paths[@]}
}

##
# Determines if the the given dependency path is a dev dependency.
##
config_service::is_dev_dependency() {
    local path=${1:?"A path is required"}
    local base=${2:-"./"}

    local args=("dev" "$path" "$base")
    local is_dev=$(__config_service::get_config_item_for_path ${args[@]})

    if [[ "$is_dev" == "true" ]]; then
        echo true
    else
        echo false
    fi
}

##
# Gets a name for a given submodule path, with an optional submodule base path,
# to allow querying of config of installed submodules.
##
config_service::get_name_for_path() {
    local path="${1:?"A path is required"}"
    local base="${2:-"./"}"

    local config="$(git config --file $base/.gitmodules --get-regexp .path)"

    echo "${config[@]}" | grep "$path" | cut -d ' ' -f 1 | cut -d '.' -f 2
}

##
# Gets a repo for a given submodule path, with an optional submodule base path,
# to allow querying of config of installed submodules.
##
config_service::get_repo_for_path() {
    local path="${1:?"A path is required"}"
    local base="${2:-"./"}"

    __config_service::get_config_item_for_path "url" "$path" "$base"
}

##
# Gets a branch for a given submodule path, with an optional submodule base
# path, to allow querying of config of installed submodules.
##
config_service::get_branch_for_path() {
    local path="${1:?"A path is required"}"
    local base="${2:-"./"}"

    __config_service::get_config_item_for_path "branch" "$path" "$base"
}

##
# Gets a version constraint for a given submodule path, with an optional
# submodule base path, to allow querying of config of installed submodules.
##
config_service::get_version_for_path() {
    local path="${1:?"A path is required"}"
    local base="${2:-"./"}"

    __config_service::get_config_item_for_path "version" "$path" "$base"
}

##
# Gets bin references for a given submodule path.
##
config_service::get_bins_for_path() {
    local path="${1:?"A path is required"}"

    echo $(git config --file "$path"/.gitmodules --get-all self.bin)
}

##
# Gets install commands for a given submodule path.
##
config_service::get_install_for_path() {
    local path="${1:?"A path is required"}"

    echo $(git config --file "$path"/.gitmodules --get-all self.install)
}

##
# Finds a submodule path from a submodule name or path value.
##
config_service::find_path_for_value() {
    local value="${1:?"A search value is required"}"

    local name="$(git config --file .gitmodules --get submodule.$value.path)"
    if [[ -n "$name" ]]; then
        echo "$name"

        return 0
    fi

    # value is not a name, but it may be a path, so let's normalise it first:
    value="$(__config_service::normalize_path "$value")"

    for path in $(config_service::get_configured_paths); do
        if [[ "$path" =~ ^"$value"$ ]]; then
            echo "$path"

            return 0
        fi
    done

    return 1
}

##
# Normalizes an actual filesystem path to a submodule 'path'
##
__config_service::normalize_path() {
    local path="${1:?"A path value is required"}"

    echo "$path" | sed -E 's,\.\/(.*),\1,;s,(.*)\/$,\1,'
}

##
# Gets a specified submodule config item for a given path.
##
__config_service::get_config_item_for_path() {
    local item="${1:?"An item is required"}"
    local path="${2:?"A path is required"}"
    local base="${3:-"./"}"

    local section="$(config_service::get_name_for_path "$path" "$base")"

    echo "$(git config --file $base/.gitmodules --get submodule.$section.$item)"
}

##
# Gets a specified submodule config item for a given path.
##
__config_service::get_all_config_item_for_path() {
    local item=${1:?"An item is required"}
    local path=${2:?"A path is required"}
    local base=${3:-"./"}

    local section="$(config_service::get_name_for_path "$path" "$base")"

    echo $(
        git config --file $base/.gitmodules --get-all submodule.$section.$item
    )
}

##
# Gets the submodule config keys for a given config item.
##
__config_service::get_keys_for_item() {
    local item=${1:?"An item key is required"}

    echo $(git config --file .gitmodules --name-only --get-regexp .$item)
}
