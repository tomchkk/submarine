#!/usr/bin/env bash

source "$SERVICE/config-service"
source "$SERVICE/gitignore-service"
source "$SERVICE/dependency-service"
source "$SERVICE/version/version-resolver"

__submodule_service_git_path="$GIT_PATH"
__submodule_service_submodules_dir="$SUBMODULES_DIR"
__submodule_service_submodules_path="$GIT_PATH/$SUBMODULES_DIR"

##
# Recursively adds a git submodule and its dependencies to a project.
##
submodule_service::add() {
    local is_super="${1:-true}"
    local is_dev="${2:-false}"
    local version="${3:-false}"
    local arguments="${@:4}"

    local super_path=$(for arg in ${arguments[@]}; do :; done; echo "$arg")
    local was_added=$(git submodule add ${arguments[@]}; echo $?)
    local super=$(config_service::get_name_for_path "$super_path")

    if "$is_super" && [[ -n "$super" ]]; then
        # any super repo should be marked as being 'super', as long as it was
        # succesfully added or is already required
        config_service::set_as_super "$super"

        if "$is_dev"; then
            # we'll only set a super as dev, dev dependencies can be calculated
            config_service::set_as_dev "$super"
        fi

        if [[ "$version" != false ]]; then
            # set version constraint
            config_service::set_version "$super" "$version"
        fi

        git add .gitmodules
    fi

    if [[ $was_added -gt 0 ]]; then
        return 1
    fi

    local dependencies=($(dependency_service::get_dependencies "$super_path"))
    local dependency_path; for dependency_path in ${dependencies[@]}; do
        dependency_path=${dependency_path/$super_path\/}

        if $(config_service::is_dev_dependency "$dependency_path" "$super_path"); then
            echo "Skipping dev dependency '$dependency_path' for '$super_path'"

            continue
        fi

        local dependency=$(
            config_service::get_name_for_path "$dependency_path" "$super_path"
        )

        echo "Adding dependency '$dependency_path' for '$super_path'"

        if ! $(config_service::get_configured_paths | grep -q "$dependency_path"); then
            local dependency_args=(
                --branch $(
                    config_service::get_branch_for_path "$dependency_path" "$super_path"
                )
                --name "$dependency"
                --
                $(config_service::get_repo_for_path "$dependency_path" "$super_path")
                "$dependency_path"
            )

            submodule_service::add false false false "${dependency_args[@]}"
        else
            echo "Dependency '$dependency_path' is already required"

            # ensure that the version common to all requiring supers is checked
            # out and any related activities are performed
            __submodule_service::post_add "$dependency_path"
        fi

        # update dependency config
        config_service::set_super_dependency "$super" "$dependency_path"
        config_service::set_dependency_super "$dependency" "$super_path"
    done

    __submodule_service::post_add "$super_path"
}

##
# Installs the submodule for a path.
##
submodule_service::install_path() {
    local path=${1:?"A submodule path is required"}

    git submodule init "$path"
    submodule_service::update_path "$path"
}

##
# Gets all installed submodule paths.
##
submodule_service::get_installed_paths() {
    echo $(git submodule foreach --quiet 'echo $sm_path')
}

##
# Updates the submodule for a path.
##
submodule_service::update_path() {
    local path=${1:?"A submodule path is required"}

    git submodule update --force --checkout --remote "$path"

    __submodule_service::post_update "$path"
}

##
# Uninstalls the submodule for a path.
##
submodule_service::uninstall_path() {
    local path=${1:?"A submodule path is required"}

    __submodule_service::unset_bin_links $path
    __submodule_service::force_uninstall_repo $path
}

##
# Removes a submodule and it's dependencies from a project. If a dependency of a
# removing submodule is also installed in its own right, only its dependency
# relationship will be updated in submodule config.
##
submodule_service::remove() {
    local path="${1:?"A submodule path is required"}"
    local super_path="$2"

    echo " - removing submodule: '$path'"

    if ! $(__submodule_service::pre_remove "$path" "$super_path"); then
        echo "  -> '$path' is a dependency of at least one other module. Skipping removal!"

        return 1
    fi

    local dependencies=($(dependency_service::get_dependencies "$path"))
    local dependency_path; for dependency_path in ${dependencies[@]}; do
        submodule_service::remove "${dependency_path/$path\/}" "$path"
    done

    __submodule_service::do_remove "$path"
    __submodule_service::post_remove
}

##
# Removes a submodule, no questions asked, or thoughts given about dependencies.
##
submodule_service::remove_indiscriminately() {
    local path="${1:?"A submodule path is required"}"

    __submodule_service::do_remove "$path"
    __submodule_service::post_remove
}

##
# Performs post-add submodule tasks.
##
__submodule_service::post_add() {
    local submodule="${1:?"A submodule path is required"}"

    __submodule_service::checkout "$submodule"
    __submodule_service::make_bin_links "$submodule"
    __submodule_service::run_install_commands "$submodule"

    git add .gitmodules
}

##
# Performs post-update submodule tasks.
##
__submodule_service::post_update() {
    local submodule="${1:?"A submodule path is required"}"

    __submodule_service::checkout "$submodule"
    __submodule_service::unset_bin_links "$submodule"
    __submodule_service::make_bin_links "$submodule"
    __submodule_service::run_install_commands "$submodule"
}

##
# Makes available bin symlinks.
##
__submodule_service::make_bin_links() {
    local submodule="${1:?"A submodule path is required"}"

    local bin_dir="$__submodule_service_submodules_path/bin"
    local bins=($(config_service::get_bins_for_path "$submodule"))

    if [[ ${#bins[@]} -gt 0 ]]; then
        # we have bins to install, so let's ensure bin dir exists and is ignored
        if [[ ! -d "$bin_dir" ]]; then
            mkdir -p "$bin_dir"
        fi

        gitignore_service::add "$__submodule_service_submodules_dir/bin"
    fi

    for bin in "${bins[@]}"; do
        local bin_abs="$__submodule_service_git_path/$submodule/$bin"
        local bin_rel="./../../$submodule/$bin"

        if [[ -e "$bin_abs" ]]; then
            ln -fs "$bin_rel" "$bin_dir/$(basename "$bin")"
        fi
    done
}

##
# Runs install commands defined by a submodule.
##
__submodule_service::run_install_commands() {
    local submodule="${1:?"A submodule path is required"}"

    local cmds=($(config_service::get_install_for_path "$submodule"))

    for cmd in "${cmds[@]}"; do
        (cd "$GIT_PATH/$submodule" && export "PROJECT_DIR=$GIT_PATH" && "$cmd" )
    done
}

##
# Performs a checkout of the submodule repo at the highest version common to
# the version constraints of all owning submodules, or the fallback branch
# config value if a common version cannot be found.
##
__submodule_service::checkout() {
    local submodule="${1:?"A submodule path is required"}"

    local version="$(version_resolver::resolve_submodule "$submodule")"

    if [[ -n "$version" ]]; then
        echo " - checking out common version '$version' of '$submodule'"

        (cd "$GIT_PATH/$submodule" && git checkout --quiet "$version")
    else
        echo " - a version compatible with all dependencies common to submodule '$submodule' could not be found! A specific version will not be checked out."

        return 1
    fi
}

##
# Performs pre-submodule removal tasks.
##
__submodule_service::pre_remove() {
    local path="${1:?"A submodule path is required"}"
    local super_path="$2"

    local can_remove=$(
        __submodule_service::can_remove_path "$path" "$super_path"
        echo $?
    )
    local name=$(config_service::get_name_for_path "$path")

    # whether or not we can actually remove the path, we need to remove its
    # reference to the super module requesting the path's removal:
    config_service::remove_dependency_super "$name" "$super_path"

    # the above config changes must be staged for further removals to work
    git add .gitmodules

    return $can_remove
}

##
# Performs the actual removal of a submodule.
##
__submodule_service::do_remove() {
    local path=${1:?"A submodule path is required"}

    __submodule_service::unset_bin_links $path
    __submodule_service::force_uninstall_repo $path
    __submodule_service::remove_path_directories $path
    __submodule_service::force_remove_index $path
}

##
# Performs post submodule removal tasks.
##
__submodule_service::post_remove() {
    local remaining=($(config_service::get_configured_paths))

    if [[ ${#remaining[@]} -eq 0 ]]; then
        autoload_service::remove
        __submodule_service::remove_config
    fi

    git add .gitmodules
}

##
# Determines if a path can be removed, which depends on whether or not it has
# any other governing super modules.
##
__submodule_service::can_remove_path() {
    local path="${1:?"A submodule path is required"}"
    local super_path="$2"

    if [[ -n "$super_path" ]] \
    && [[ $(config_service::path_super_count "$super_path") -gt 0 ]] \
    && ! $(config_service::path_is_dependency_of_super "$super_path"); then
        # the path's super also has a super, so it is _not_ self-governing
        return 1
    fi

    if [[ $(config_service::path_super_count "$path") -gt 1 ]]; then
        # a path with more than one super should still be governed by it
        return 1
    fi

    return $(config_service::path_is_dependency_of_super "$path" "$super_path")
}

##
# Unsets bin links for a submodule.
##
__submodule_service::unset_bin_links() {
    local path="${1:?"A submodule path is required"}"

    local bin_dir="$__submodule_service_submodules_path/bin"
    local bins=($(config_service::get_bins_for_path "$path"))

    for bin in "${bins[@]}"; do
        local name="$(basename "$bin")"

        if [[ -L "$bin_dir/$name" ]]; then
            unlink "$bin_dir/$name"
        fi
    done

    if [[ -z "$(ls -A "$bin_dir" 2>/dev/null)" ]]; then
        # remove empty bin dir
        rm -rf "$bin_dir"
        gitignore_service::remove "$__submodule_service_submodules_dir/bin"
    fi
}

##
# Removes vestigial submodule path directories.
##
__submodule_service::remove_path_directories() {
    local path=${1:?"A submodule path is required"}

    for candidate in $(__submodule_service::get_dir_sequence "$path"); do
        local dir="$__submodule_service_submodules_path/$candidate"

        if [[ -n "$(ls -A "$dir" 2>/dev/null)" ]]; then
            echo " - skipping non-empty '$candidate'"

            break
        fi

        echo " - removing empty '$candidate'"

        # remove empty submodule directory
        rm -d "$dir"
        # remove corresponding git module directory
        rm -rf "$__submodule_service_git_path/.git/modules/$candidate"
    done
}

##
# Uninstalls the submodule repo code from the given submodule path, ignoring any
# local submodule changes.
##
__submodule_service::force_uninstall_repo() {
    local path=${1:?"A submodule path is required"}

    git submodule deinit --force -- $path
}

##
# Removes the submodule from the index.
##
__submodule_service::force_remove_index() {
    local path=${1:?"A submodule path is required"}

    git rm --force "$path"
}

##
# Removes the configured submodule directory, .git/modules directory and the
# .gitmodules file.
##
__submodule_service::remove_config() {
    if [[ -d "$__submodule_service_submodules_path" ]]; then
        rm -d "$__submodule_service_submodules_path"
    fi

    if [[ -f "$__submodule_service_git_path/.gitmodules" ]]; then
        rm "$__submodule_service_git_path/.gitmodules"
    fi

    if [[ -d "$__submodule_service_git_path/.git/modules" ]]; then
        rm -d "$__submodule_service_git_path/.git/modules"
    fi
}

##
# Gets an array of directories, sequentially from the deepest to the nearest to
# the base submodules directory for a submodule path - i.e.:
# - vendor/directory/project-name
# - vendor/directory
# - vendor
##
__submodule_service::get_dir_sequence() {
    local path=${1:?"A submodule path is required"}
    local project=$(
        echo $path | sed -E "s|^$__submodule_service_submodules_dir/||"
    )
    local submodules_path="$__submodule_service_submodules_path"
    local sequence=()

    for candidate in $(find "$submodules_path" -type d); do
        candidate=$(echo $candidate | sed -E "s|^$submodules_path/||")

        if [[ "$project/" =~ ^"$candidate/" ]]; then
            sequence+=("$candidate")
        fi
    done

    local oldIFS=$IFS && IFS=$'\n'
    local reversed=($(sort -r <<< "${sequence[*]}"))
    IFS=$oldIFS

    echo ${reversed[@]}
}
