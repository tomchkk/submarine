#!/usr/bin/env bash

__script_dir="$(dirname "${BASH_SOURCE[0]}")"
source "$__script_dir/../../../../bootstrap"

__strategy="$__src_dir/service/version/constraint/strategy/caret-strategy"
__version_examiner="$__src_dir/service/version/version-examiner"

caret_strategy_test::test_edge_cases() {
    local actual

    source "$__strategy" "^0.0.0" "$__version_examiner"

    actual=$(constraint_strategy::is_satisfied_by "0.0.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.0.999"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.0"; echo $?)
    bash_test::assert_equals 1 $actual
}

caret_strategy_test::test_truncated_constraints() {
    local actual

    # can handle truncated prerelease format
    source "$__strategy" "^0.1" "$__version_examiner"

    actual=$(constraint_strategy::is_satisfied_by "0.0.1"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.99"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.2.0"; echo $?)
    bash_test::assert_equals 1 $actual

    # can handle truncated standard format
    source "$__strategy" "^1.0" "$__version_examiner"

    actual=$(constraint_strategy::is_satisfied_by "0.0.1"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.0"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.0.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.5.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.5.999"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "2.0.0"; echo $?)
    bash_test::assert_equals 1 $actual
}

caret_strategy_test::test_standard_constraints() {
    local actual

    # can handle prerelease format
    source "$__strategy" "^0.1.0" "$__version_examiner"

    actual=$(constraint_strategy::is_satisfied_by "0.0.0"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.999"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.2.0"; echo $?)
    bash_test::assert_equals 1 $actual

    # can handle standard format
    source "$__strategy" "^1.0.0" "$__version_examiner"

    actual=$(constraint_strategy::is_satisfied_by "0.0.1"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "0.1.0"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.0.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.5.0"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "1.5.999"; echo $?)
    bash_test::assert_equals 0 $actual

    actual=$(constraint_strategy::is_satisfied_by "2.0.0"; echo $?)
    bash_test::assert_equals 1 $actual

    actual=$(constraint_strategy::is_satisfied_by "10.0.0"; echo $?)
    bash_test::assert_equals 1 $actual
}
